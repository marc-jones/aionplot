---
- hosts: all

  vars_files:
    - vars.yml

  tasks:

    - name: install firewalld
      yum:
        name: firewalld
        state: present

    - name: start and enable firewalld
      service:
        name: firewalld
        state: started
        enabled: yes
      notify: restart docker daemon

    - name: enable and persist http/https ports
      firewalld:
        service: "{{ item }}"
        permanent: yes
        state: enabled
        immediate: yes
      loop: "{{ FIREWALLD_ALLOWED_SERVICES }}"
      notify: restart docker daemon

    - name: enable and persist extra ports
      firewalld:
        port: "{{ item }}"
        permanent: yes
        state: enabled
        immediate: yes
      loop: "{{ FIREWALLD_ALLOWED_PORTS }}"
      notify: restart docker daemon

    - name: download get-pip.py
      get_url:
        url: https://bootstrap.pypa.io/get-pip.py
        dest: /opt/get_pip.py
      register: get_pip_downloaded

    - name: install pip
      command: python /opt/get_pip.py
      when: get_pip_downloaded is changed

    - name: install Docker dependencies
      yum:
        name: "{{ packages }}"
      vars:
        packages:
          - yum-utils
          - device-mapper-persistent-data
          - lvm2

    - name: add the Docker repo
      yum_repository:
        name: dockerrepo
        description: docker main repository
        baseurl: https://download.docker.com/linux/centos/7/x86_64/stable/
        enabled: 1
        gpgkey: https://download.docker.com/linux/centos/gpg

    - name: install the Docker engine
      yum:
        name: docker-ce
      notify: restart docker daemon

    - name: enable the Docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: install Python docker module
      pip:
        name: docker

    - name: create the webapp group
      group:
        name: webapp
        state: present
        gid: 1001

    - name: add webapp user
      user:
        name: webapp
        group: webapp
        uid: 1001

    - name: create webapp network
      docker_network:
        name: webapp

    - name: create mongo data directory
      file:
        path: "{{ MONGO_DATA_DIR }}"
        owner: webapp
        group: webapp
        state: directory
        recurse: yes

    - name: create mongo init config directory
      file:
        path: "{{ MONGO_INIT_CONFIG_DIR }}"
        owner: webapp
        group: webapp
        state: directory
        recurse: yes

    - name: generate mongo docker container startup script
      template:
        owner: webapp
        group: webapp
        src: mongo_config.js
        dest: "{{ MONGO_INIT_CONFIG_DIR }}"

    - name: create mongo docker container
      docker_container:
        name: db
        user: "1001:1001"
        image: "{{ MONGO_IMAGE }}"
        state: started
        restart_policy: "on-failure"
        restart_retries: 5
        volumes:
          - "{{ MONGO_DATA_DIR }}:/data/db"
          - "{{ MONGO_INIT_CONFIG_DIR }}:/docker-entrypoint-initdb.d"
        networks:
          - name: webapp
        env:
          MONGO_INITDB_ROOT_USERNAME: "{{ MONGO_INITDB_ROOT_USERNAME }}"
          MONGO_INITDB_ROOT_PASSWORD: "{{ MONGO_INITDB_ROOT_PASSWORD }}"

    - name: create flaskapp docker container
      docker_container:
        name: "{{ FLASKAPP_DOCKER_NAME }}"
        user: 101
        image: "{{ AIONPLOT_FLASKAPP_IMAGE }}"
        pull: yes
        state: started
        restart_policy: "on-failure"
        restart_retries: 5
        volumes:
          -  "{{ SERVER_CONTENT_DIR }}:/content"
        networks:
          - name: webapp
        env:
          WEBAPP_SECRET: "{{ WEBAPP_SECRET }}"
          MONGO_HOSTNAME: db
          MONGO_WEBAPP_USERNAME: "{{ MONGO_WEBAPP_USERNAME }}"
          MONGO_WEBAPP_PASSWORD: "{{ MONGO_WEBAPP_PASSWORD }}"

    - name: create nginx configuration directory
      file:
        path: "{{ NGINX_CONFIG_DIR }}"
        owner: webapp
        group: webapp
        state: directory
        recurse: yes

    - name: create the nginx configuration
      template:
        src: nginx.conf
        dest: "{{ NGINX_CONFIG_FILE }}"

    - name: create nginx docker container
      docker_container:
        name: nginx_reverse_proxy
        image: "{{ NGINX_IMAGE }}"
        pull: yes
        state: started
        restart_policy: "on-failure"
        restart_retries: 5
        volumes:
          -  "{{ NGINX_CONFIG_FILE }}:/etc/nginx/conf.d/default.conf"
        ports:
          - "80:8080"
        networks:
          - name: webapp

  handlers:
    - name: restart docker daemon
      service:
        name: docker
        state: restarted
