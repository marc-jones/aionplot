---
- hosts: all

  vars_files:
    - vars.yml

  tasks:

    - name: install core packages (git)
      yum:
        name: "{{ packages }}"
        state: present
      vars:
        packages:
          - git

    - name: download get-pip.py
      get_url:
        url: https://bootstrap.pypa.io/get-pip.py
        dest: /opt/get_pip.py
      register: get_pip_downloaded

    - name: install pip
      command: python /opt/get_pip.py
      when: get_pip_downloaded is changed

    - name: clone the webapp repository
      git:
        repo: "{{ webapp_git_repo }}"
        dest: /opt/aionplot

    - name: install Docker dependencies
      yum:
        name: "{{ packages }}"
      vars:
        packages:
          - yum-utils
          - device-mapper-persistent-data
          - lvm2

    - name: add the Docker repo
      yum_repository:
        name: dockerrepo
        description: docker main repository
        baseurl: https://download.docker.com/linux/centos/7/x86_64/stable/
        enabled: 1
        gpgkey: https://download.docker.com/linux/centos/gpg

    - name: install the Docker engine
      yum:
        name: docker-ce
      notify: restart docker daemon

    - name: enable the Docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: install Python docker module
      pip:
        name: docker

    - name: create webapp network
      docker_network:
        name: webapp

    - name: create mongo data directory
      file:
        path: "{{ mongo_data_dir }}"
        state: directory
        recurse: yes

    - name: create mongo init config directory
      file:
        path: "{{ mongo_init_config_dir }}"
        state: directory
        recurse: yes

    - name: generate mongo docker container startup script
      template:
        src: mongo_config.js
        dest: "{{ mongo_init_config_dir }}"

    - name: create mongo docker container
      docker_container:
        name: db
        image: "mongo:4.0.6" 
        state: started
        volumes:
          - "{{ mongo_data_dir }}:/data/db"
          - "{{ mongo_init_config_dir }}:/docker-entrypoint-initdb.d"
        networks:
          - name: webapp
        env:
          MONGO_INITDB_ROOT_USERNAME: "{{ mongo_initdb_root_username }}"
          MONGO_INITDB_ROOT_PASSWORD: "{{ mongo_initdb_root_password }}"

    - name: create flaskapp docker container
      docker_container:
        name: web
        image: flaskapp
        state: started
        ports:
          - "80:80"
        networks:
          - name: webapp
        env:
          MONGO_HOSTNAME: db
          MONGO_WEBAPP_USERNAME: "{{ mongo_initdb_root_username }}"
          MONGO_WEBAPP_PASSWORD: "{{ mongo_initdb_root_password }}"

  handlers:
    - name: restart docker daemon
      service:
        name: docker
        state: restarted
